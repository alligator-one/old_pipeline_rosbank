@#!/bin/@bash@  
#--------- Скрипт по волновому рестарту списка компонент на всех серверах
#----------Автор:Цегельник Р.В
#--------- От 18.06.2021
#--------- V.1.1
#----------Использование скрипта:
#---------- список компонент разделенный пробелом может передаваться на вход скрипта (раскоментить стр26 )
#---------- пример:restart_component.sh "MqSeriesSrvRcvr EAIObjMgr_rus"
#---------- ила задается в внутри (стр25).
#---------- Списоr имён задается внутри и может быть скорректирован под конкретный случай.
#----------Описание скрипта:
#------------1)Выполняется волновой рестарт компонент по одному серверу
#------------  PAUSE-->sleep(80)-->KILL-->sleep(20)-->START-->sleep(90)-->STATUS-->[sleep(50)-->STATUS]
#------------2) Если после двух проверок какие-то компоненты не запустились -выполняется дополнительный рестарт проблемных компонент.
#------------
 
#---settings-------------------------------------        
gateway={{ siebel_gateway }}
ent={{ siebel_enterprise }}
user={{ sadmin_user }}
password={{ sadmin_pass }}
 
 
complist="{{ complist }}"
#complist=$1
badcomplist=""
{% raw %}
 
#----------------------------------------
 
cd $( cd "$(dirname "$0")" ; pwd -P )
. /opt/siebel/ses/siebsrvr/siebenv.sh
srvmgr_in_file=srvmgr_in.txt
srvmgr_out_list_servers=srvmgr_out_list_servers.txt
SCRIPT_LOG_FILE=$BASH_SOURCE.log        
SERVERS_LIST_FILE_DOWN=servers_list_file_down.txt
SERVERS_LIST_FILE_UP=servers_list_file_up.txt
 
IFS=$' '
WORKING_SERVERS_COUNTER=0
 
rm -f $SERVERS_LIST_FILE_UP
 
function getServers ()
{
            #получение списка серверов
            >$srvmgr_in_file
            #         echo "set server $server_logic_name">>$srvmgr_in_file
            echo "spool off">>$srvmgr_in_file
            echo "set header false">>$srvmgr_in_file
            echo "set footer false">>$srvmgr_in_file
            echo "spool $srvmgr_out_list_servers" >>$srvmgr_in_file
            echo "list servers show SBLSRVR_NAME,SV_DISP_STATE">>$srvmgr_in_file
            echo "exit">>$srvmgr_in_file
            srvrmgr /g $gateway /e $ent /u $user /p $password -i $srvmgr_in_file >/dev/null 2>>$SCRIPT_LOG_FILE
            if ! [ -f $srvmgr_out_list_servers ]; then
               sleep 5
               srvrmgr /g $gateway /e $ent /u $user /p $password -i $srvmgr_in_file >/dev/null 2>>$SCRIPT_LOG_FILE
            fi
    if [ -f $srvmgr_out_list_servers ]; then
              #Удаляем пробелы в конце строк
              sed -ri  '/\s+$/s///' $srvmgr_out_list_servers
              IFS=$'\n'
              for server_name in $(cat $srvmgr_out_list_servers)
              do
                          if ! [ ${server_name:0:7} = "srvrmgr" ] &&
                          ! [ ${server_name:0:12} = "list servers" ] &&
                          ! [ ${server_name:0:4} = "exit" ] &&
                          ! [ ${server_name:0:25} = "Disconnecting from server" ] &&
                          (( `expr length $server_name` >3 )); then
                                      SERVERS_RUN=$server_name
                                      if (( `echo $SERVERS_RUN | grep "Интерактивно\|Выполняется\|Running\|Online" | wc -l` ==1 ));then
                                          let "WORKING_SERVERS_COUNTER+=1"
                                          SERVERS_NUMBER=( `echo $SERVERS_RUN | grep "Интерактивно\|Выполняется\|Running\|Online" | cut -d" " -f1` )
                                          echo $SERVERS_NUMBER >>$SERVERS_LIST_FILE_DOWN
                                  SERVERS_LIST_V=$SERVERS_LIST_V" "$SERVERS_NUMBER
                                      fi       
                          fi       
              done
              if [ $WORKING_SERVERS_COUNTER -ne 0 ]; then
                 SERVERS_LIST_V=${SERVERS_LIST_V:1}
                 SERVERS_LIST=( `echo $(sort -k 1.4n $SERVERS_LIST_FILE_DOWN)` )
                        echo $SERVERS_LIST >> $SERVERS_LIST_FILE_UP
                 echo $SERVERS_LIST | tee -a $SCRIPT_LOG_FILE
      else
                 echo "Don't working servers" | tee -a $SCRIPT_LOG_FILE
              fi
    else
      echo "Don't working gateway server" | tee -a $SCRIPT_LOG_FILE
    fi
            rm -f $srvmgr_out_list_servers;rm -f $srvmgr_in_file;rm -f $SERVERS_LIST_FILE_DOWN
}
 
function manageComp ()
{
    IFS=$' '
            >$srvmgr_in_file
            echo "set server $1">>$srvmgr_in_file
            for comp in $3
            do
                        echo "$2 comp $comp for server $1">>$srvmgr_in_file
            done
            echo "exit">>$srvmgr_in_file
            srvrmgr /g $gateway /e $ent /u $user /p $password -i $srvmgr_in_file >/dev/null 2>>$SCRIPT_LOG_FILE
            if ! [ $? -eq 0 ]; then
               sleep 5
               echo "=======Retry Gatewey====="
               srvrmgr /g $gateway /e $ent /u $user /p $password -i $srvmgr_in_file >/dev/null 2>>$SCRIPT_LOG_FILE
               if ! [ $? -eq 0 ]; then
                  errorEvent "Don't working gateway server"
               fi
            fi
            rm -f $srvmgr_in_file
}
 
 
function errorEvent()
{
  printf " ERROR EVENT !!!!!! $1 \n "| tee -a $SCRIPT_LOG_FILE
  echo "========End   ("` date "+%Y-%m-%d %H:%M:%S" `")================================" >> $SCRIPT_LOG_FILE     
  exit 1
}
 
function CheckComp ()
{
            local WORKING_COMPS_COUNTER=0
            local COMPS_COUNTER=0
            local S="srvrmgr -g $gateway -e $ent -u $user -p $password -s $1 -c 'list comp show CC_ALIAS,CP_DISP_RUN_STATE' 2>>$SCRIPT_LOG_FILE"
            local OUT=`eval $S`
            if [[ $(echo $OUT | grep "srvrmgr:APP" | wc -l) -eq 0 ]]; then
               echo "========Retry Gateway========= " | tee -a $SCRIPT_LOG_FILE   
               sleep 5
               local OUT=`eval $S`
               if [[ $(echo $OUT | grep "srvrmgr:APP" | wc -l) -eq 0 ]]; then
                    errorEvent "Don't working gateway server"
               fi
            fi
            badcomplist=""
    IFS=$' '
            if [ $? -eq 0 ]; then
                        for compp in $complist
                        do
                                    if (( `echo $OUT | grep -w $compp | grep "Интерактивно\|Выполняется\|Running\|Online" | wc -l` ==1 ));then
                                               let "WORKING_COMPS_COUNTER+=1"
                                    else
                                               badcomplist=$badcomplist" "$compp
                                    fi
 
                                    let "COMPS_COUNTER+=1"
                        done
                        badcomplist=${badcomplist:1}
                        #echo "---$1--- COMPS_COUNTER =$COMPS_COUNTER"
                        #echo "---$1--- WORKING_COMPS_COUNTER =$WORKING_COMPS_COUNTER"
                        if          [ $WORKING_COMPS_COUNTER -eq $COMPS_COUNTER ] ;then
                                    return 0
                        else
                                    return 1
                        fi
            else
                        errorEvent "Checking components status FAIL"
            fi         
}
 
 
function Restartcomp()
{
            #-----Killing comps -----
            printf " Killing comps for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
            manageComp $SERVER kill "$badcomplist"
            if [ $? -eq 0 ]; then
                        printf "OK\n"| tee -a $SCRIPT_LOG_FILE
            else
                        errorEvent "Killing comps FAIL"
            fi
    #-----Wait -----
            printf " Waiting 20.sec......"| tee -a $SCRIPT_LOG_FILE
            sleep 20
            printf "OK\n"| tee -a $SCRIPT_LOG_FILE
           
            #-----Starting comps -----
            printf " Starting comps for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
            manageComp $SERVER start "$badcomplist"
            if [ $? -eq 0 ]; then
                        printf "OK\n"| tee -a $SCRIPT_LOG_FILE
            else
                        errorEvent "Starting comps FAIL"
            fi
            #-----Wait -----
            printf " Waiting 90.sec......"| tee -a $SCRIPT_LOG_FILE
            sleep 90
            printf "OK\n"| tee -a $SCRIPT_LOG_FILE
}
 
echo ""
echo "========Start (" ` date "+%Y-%m-%d %H:%M:%S" ` ")==============================" | tee -a $SCRIPT_LOG_FILE
#-----Getting servers list-----
printf " Getting servers list......."| tee -a $SCRIPT_LOG_FILE
getServers
if [ $? -ne 0 ]; then errorEvent "Getting servers list FAIL"; fi
IFS=$' '
#if (( `expr length $SERVERS_LIST` >1 )); then
if (( `echo ${#SERVERS_LIST}` >1 )); then
            #printf "OK\n"| tee -a $SCRIPT_LOG_FILE
            printf ""
            echo "   SERVERS_LIST=$SERVERS_LIST"| tee -a $SCRIPT_LOG_FILE
else
  printf "SERVERS_LIST IS NULL\n"| tee -a $SCRIPT_LOG_FILE
  errorEvent "Servers list is NULL --FAIL"
fi
echo "   complist=$complist"| tee -a $SCRIPT_LOG_FILE
 
IFS=$' '
for SERVER in $SERVERS_LIST
do
            #-----Pausing comps-----
            printf " Pausing comps for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
            manageComp $SERVER pause "$complist"
            if [ $? -eq 0 ]; then
                        printf "OK\n"| tee -a $SCRIPT_LOG_FILE
            else
                        errorEvent "Pausing comps FAIL"
            fi
           
            #-----Wait -----
            printf " Waiting 80.sec......"| tee -a $SCRIPT_LOG_FILE
            sleep 80
            printf "OK\n"| tee -a $SCRIPT_LOG_FILE
           
            #-----Killing comps -----
            printf " Killing comps for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
            manageComp $SERVER kill "$complist"
            if [ $? -eq 0 ]; then
                        printf "OK\n"| tee -a $SCRIPT_LOG_FILE
            else
                        errorEvent "Killing comps FAIL"
            fi
           
    #-----Wait -----
            printf " Waiting 20.sec......"| tee -a $SCRIPT_LOG_FILE
            sleep 20
            printf "OK\n"| tee -a $SCRIPT_LOG_FILE
           
            #-----Starting comps -----
            printf " Starting comps for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
            manageComp $SERVER start "$complist"
            if [ $? -eq 0 ]; then
                        printf "OK\n"| tee -a $SCRIPT_LOG_FILE
            else
                        errorEvent "Starting comps FAIL"
            fi
           
            #-----Wait -----
            printf " Waiting 110.sec......"| tee -a $SCRIPT_LOG_FILE
            sleep 110
            printf "OK\n"| tee -a $SCRIPT_LOG_FILE
           
            #-----Checking status comps -----
            printf " Checking comps status for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
            CheckComp $SERVER
            if [ $? -eq 0 ]; then
                        printf "OK\n"| tee -a $SCRIPT_LOG_FILE
            else
                        printf "!! comps not started !!\n"| tee -a $SCRIPT_LOG_FILE
                        #-----Wait -----
        sleep_restart_1=0
                        for MIN in {0..80..2}
        do
                          let "sleep_restart_1=$sleep_restart_1 + 30"
          printf " Waiting $sleep_restart_1.sec......from 1230.sec......"| tee -a $SCRIPT_LOG_FILE
          sleep 30
                          printf "OK\n"| tee -a $SCRIPT_LOG_FILE
                          #-----Checking status comps again -----
                          printf " Checking comps status again for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
                          CheckComp $SERVER
                          if [ $? -eq 0 ]; then
                                    printf "OK\n"| tee -a $SCRIPT_LOG_FILE
                                    break
                          else
                                    printf "!! comps not started ($badcomplist) !!\n"| tee -a $SCRIPT_LOG_FILE
                          fi
                        done
                #-----Checking status comps again -----
                        #printf " Checking comps status again for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
                        CheckComp $SERVER
                        if ! [ $? -eq 0 ]; then                                                                                                                                                                                   
                                    printf " Making restart ($badcomplist)......\n"| tee -a $SCRIPT_LOG_FILE
                                    Restartcomp
                                   
                                    if [ $? -eq 0 ]; then
                                               printf ""| tee -a $SCRIPT_LOG_FILE
                                    else
                                               errorEvent "restart comps FAIL"
                                    fi
                                   
                            printf " Checking comps status again for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
                            CheckComp $SERVER
                            if [ $? -eq 0 ]; then
                                printf "OK\n"| tee -a $SCRIPT_LOG_FILE
                    else
                                printf "!! comps not started !!\n"| tee -a $SCRIPT_LOG_FILE
                                #-----Wait -----
                sleep_restart_1=0
                                for MIN in {0..60..2}
                do
                                  let "sleep_restart_1=$sleep_restart_1 + 30"
                  printf " Waiting $sleep_restart_1.sec......from 930.sec......"| tee -a $SCRIPT_LOG_FILE
                  sleep 30
                                  printf "OK\n"| tee -a $SCRIPT_LOG_FILE
                                  #-----Checking status comps again -----
                                  printf " Checking comps status again for server $SERVER ......."| tee -a $SCRIPT_LOG_FILE
                                  CheckComp $SERVER
                                  if [ $? -eq 0 ]; then
                                              printf "OK\n"| tee -a $SCRIPT_LOG_FILE
                                                             success_restart=1
                                              break
                                  else
                                             printf "!! comps not started ($badcomplist) !!\n"| tee -a $SCRIPT_LOG_FILE
                                                 fi
                                               done
                            fi
                        fi
                        if ! [[ -z "$success_restart" ]]; then
                           false
                        else
                           CheckComp $SERVER
                           if ! [ $? -eq 0 ]; then                                                                                                                                                                                            
                                    errorEvent "Checking components started FAIL"
                           fi
                        fi
    fi     
done
 
echo "========End   ("` date "+%Y-%m-%d %H:%M:%S" `")================================" | tee -a $SCRIPT_LOG_FILE
echo "" | tee -a $SCRIPT_LOG_FILE
 
 
{% endraw %}